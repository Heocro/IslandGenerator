//package
package program;

//java imports
import java.util.Collections;
import java.util.Vector;

//class
public final class Grid {
	
	//attributes
	private int x = 1;
	private int y = 1;
	private Grid topGrid;
	private Grid bottomGrid;
	private Grid leftGrid;
	private Grid rightGrid;
	private GridKind kind = GridKind.OCEAN;
	
	//constructor
	public Grid() {}
	
	//constructor
	public Grid(int x, int y) throws Exception {
		if (x < 1) {
			throw new Exception("X is smaller than 1.");
		}
		if (y < 1) {
			throw new Exception("Y is smaller than 1.");
		}
		this.x = x;
		this.y = y;
	}
	
	//method
	public void createTopGrid() throws Exception {
		if (hasTopGrid()) {
			throw new Exception("Grid has a top grid.");
		}
		topGrid = new Grid(x, y + 1);
		topGrid.bottomGrid = this;
		if (leftGrid != null && leftGrid.topGrid != null) {
			leftGrid.topGrid.rightGrid = topGrid;
			topGrid.leftGrid = leftGrid.topGrid;
		}
	}
	
	//method
	public void createRightGrid() throws Exception {
		if (hasRightGrid()) {
			throw new Exception("Grid has a right grid.");
		}
		rightGrid = new Grid(x + 1, y);
		rightGrid.leftGrid = this;
		if (bottomGrid != null && bottomGrid.rightGrid != null) {
			bottomGrid.rightGrid.topGrid = rightGrid;
			rightGrid.bottomGrid = bottomGrid.rightGrid;
		}
	}
	
	//method
	public void createRightGrids(int number) throws Exception {
		if (number > 0) {
			createRightGrid();
			rightGrid.createRightGrids(number - 1);
		}
	}
	
	//method
	public int getX() {
		return x;
	}
	
	//method
	public int getY() {
		return y;
	}
	
	//method
	public Grid getTopGrid() throws Exception {
		if (!hasTopGrid()) {
			throw new Exception("Grid has no top grid");
		}
		return topGrid;
	}
	
	//method
	public Vector<Grid> getTopGrids(int max) {
		if (hasTopGrid() && max > 0) {
			Vector<Grid> topGrids = topGrid.getTopGrids(max - 1);
			topGrids.add(this);
			return topGrids;
		}
		return new Vector<Grid>();
	}
	
	//method
	public Grid getBottomGrid() throws Exception {
		if (!hasBottomGrid()) {
			throw new Exception("Grid has no bottom grid.");
		}
		return bottomGrid;
	}
	
	//method
	public Vector<Grid> getBottomGrids(int max) {
		if (hasBottomGrid() && max > 0) {
			Vector<Grid> bottomGrids = bottomGrid.getBottomGrids(max - 1);
			bottomGrids.add(bottomGrid);
			return bottomGrids;
		}
		return new Vector<Grid>();
	}
	
	//method
	public Grid getLeftGrid() throws Exception {
		if (!hasLeftGrid()) {
			throw new Exception("Grid has no left grid.");
		}
		return leftGrid;
	}
	
	//method
	public Vector<Grid> getLeftGrids(int max) {
		if (hasLeftGrid() && max > 0) {
			Vector<Grid> leftGrids = leftGrid.getLeftGrids(max - 1);
			leftGrids.add(leftGrid);
			return leftGrids;
		}
		return new Vector<Grid>();
	}
	
	//method
	public Grid getRightGrid() throws Exception {
		if (!hasRightGrid()) {
			throw new Exception("Grid has no right grid.");
		}
		return rightGrid;
	}
	
	//method
	public Vector<Grid> getRightGrids() {
		if (hasRightGrid()) {
			Vector<Grid> rightGrids = rightGrid.getRightGrids();
			rightGrids.add(rightGrid);
			return rightGrids;
		}
		return new Vector<Grid>();
	}
	
	//method
	public Vector<Grid> getRightGrids(int max) {
		if (hasRightGrid() && max > 0) {
			Vector<Grid> rightGrids = rightGrid.getRightGrids(max - 1);
			rightGrids.add(rightGrid);
			return rightGrids;
		}
		return new Vector<Grid>();
	}
	
	//method
	public boolean hasTopGrid() {
		return (topGrid != null);
	}
	
	//method
	public boolean hasBottomGrid() {
		return (bottomGrid != null);
	}	
	
	//method
	public boolean hasLeftGrid() {
		return (leftGrid != null);
	}
	
	//method
	public boolean hasRightGrid() {
		return (rightGrid != null);
	}
	
	//method
	public GridKind getKind() {
		return kind;
	}
		
	//method
	public void setKind(GridKind kind) {
		this.kind = kind;
	}
	
	//method
	public void paintIsland(ValueGenerator valueGenerator, int counter) {
		//set own kind
		setKind(GridKind.LAND);
		
		//paint island further recursively
		for (Grid grid: getNeighbourGridsRandomlyArranged(valueGenerator)) {
			if (grid.getKind() == GridKind.OCEAN && counter > 1) {
				if (valueGenerator.getTrueForPropability(98)) {
					grid.paintIsland(valueGenerator, counter - 1);
				}
				else {
					grid.paintIsland(valueGenerator, counter + 8);
				}
			}
		}
	}
	
	//method
	public void paintCoast(ValueGenerator valueGenerator, int length) {
		setKind(GridKind.COAST);
		if (length > 1) {
			for (Grid grid: getNeighbourGridsRandomlyArranged(valueGenerator)) {
				if (grid.getKind() == GridKind.OCEAN) {
					grid.paintCoast(valueGenerator, length - 1 - valueGenerator.getNumberBetweenZeroAndValueIncludingBounds(length));
				}
			}
		}
	}
	
	//method
	public void paintDesert(ValueGenerator valueGenerator, int probability) {
		if (valueGenerator.getTrueForPropability(probability)) {
			setKind(GridKind.DESERT);
			for (Grid grid: getNeighbourGridsRandomlyArranged(valueGenerator)) {
				if (grid.getKind() == GridKind.LAND) {
					grid.paintDesert(valueGenerator, probability - 1);
				}
			}
		}
	}
	
	//method
	public void paintMountains(ValueGenerator valueGenerator, int counter) {
		//set own kind
		setKind(GridKind.MOUNTAIN);
		
		//paint mountains further recursively
		for (Grid grid: getNeighbourGridsRandomlyArranged(valueGenerator)) {
			if ((grid.getKind() == GridKind.OCEAN || grid.getKind() == GridKind.LAND) && counter > 1) {
				if (valueGenerator.getTrueForPropability(98)) {
					grid.paintMountains(valueGenerator, counter - 1);
				}
				else {
					grid.paintMountains(valueGenerator, counter + 15);
				}
			}
		}
	}
	
	//method
	public Vector<Grid> getNeighbourGrids() {
		Vector<Grid> neighbourGrids = new Vector<Grid>();
		if (hasTopGrid()) {
			neighbourGrids.add(topGrid);
		}
		if (hasBottomGrid()) {
			neighbourGrids.add(bottomGrid);
		}
		if (hasLeftGrid()) {
			neighbourGrids.add(leftGrid);
		}
		if (hasRightGrid()) {
			neighbourGrids.add(rightGrid);
		}
		return neighbourGrids;
	}
	
	//method
	public Vector<Grid> getNeighbourGridsRandomlyArranged(ValueGenerator valueGenerator) {
		Vector<Grid> neighbourGrids = getNeighbourGrids();
		for (int i = 0; i <= valueGenerator.getNumberBetweenZeroAndValueIncludingBounds(15); i++) {
			int index1 = valueGenerator.getNumberBetweenZeroAndValueIncludingBounds(neighbourGrids.size() - 1);
			int index2 = valueGenerator.getNumberBetweenZeroAndValueIncludingBounds(neighbourGrids.size() - 1);
			Collections.swap(neighbourGrids,index1,index2);
		}
		return neighbourGrids;
	}
	
	//method
	public Direction getRandomDirection(ValueGenerator valueGenerator) {
		int a = valueGenerator.getNumberBetweenZeroAndValueIncludingBounds(3) + 1;
		if (a == 1) {
			return Direction.NORTH;
		}
		if (a == 2) {
			return Direction.SOUTH;
		}
		if (a == 3) {
			return Direction.WEST;
		}
		return Direction.EAST;
	}
}
